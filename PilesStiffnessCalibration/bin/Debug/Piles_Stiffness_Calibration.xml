<?xml version="1.0"?>
<doc>
<assembly>
<name>
Piles_Stiffness_Calibration
</name>
</assembly>
<members>
<member name="T:Piles_Stiffness_Calibration.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Piles_Stiffness_Calibration.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Piles_Stiffness_Calibration.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Piles_Stiffness_Calibration.My.Resources.Resources.PluginIcon">
<summary>
  Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
</summary>
</member>
<member name="T:Piles_Stiffness_Calibration.AudioManagerInterface">
 <summary>
     <remarks>
         <para>Interface that defines the methods that all the concrete classes of 
         type AudioManager have to implement.</para>
     </remarks>
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.ControllerInterface">
 <summary>
     <remarks>
         <para>Interface that defines the methods that all the concrete classes of 
         type Controller have to implement.</para>
     </remarks>
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.Document">
 <summary>
     <remarks>
         Enumeration made from a number Of identification constants For different typologies Of text document
         from which to extract text and data to be displayed in the UI of the application.
         Each Constant Is then associated with a specific filepath to the corresponding document.
         The use of Enum constants allow to hide the filepaths from the user.
     </remarks>
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.EventsListener">
 <summary>
     <remarks>
         Class responsible for running sound effects and calling Model's methods whenever 
         an event gets triggered by any registered command within the UI components of the View.
     </remarks>
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.ControllerFileManager">
 <summary>
     <remarks>
         <para>Static Class responsible to provide utility methods allowing to get important information
         regarding the files used by the controller.</para>
     </remarks>
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.ExceptionHandler">
 <summary>
     <remarks>
         Abstract Class used to define common attributes, constructor and methods to be inherited
         by all concrete classes of type ExceptionHandler.
     </remarks>
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.ExceptionHandlerInterface">
 <summary>
     <remarks>
         Interface that defines the methods that all the concrete classes of 
         type ExceptionHandler have to implement.
     </remarks>
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.ExcessiveΔKHandler">
 <summary>
     <remarks>
         Concrete class inheriting from the ExceptionHandler class and specialized in creating
         and displaying a Warning message when ΔK is found to be excessive between two consecutive
         iterations of the piles stiffnesses calibration.
     </remarks>
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.FilePathRetriever">
 <summary>
     <remarks>
         Static class used to retrieve preset filepaths based on the value of the input Document enumeration.
         This allows to keep all the filepaths encapsuled within the getPath() method of the present class.
         These filepaths can be directly accessed via shorter and more intuitive nicknames/short names as per 
         the Document enumeration values, thus making the coding much better readable.
     </remarks>
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.MissingInputsHandler">
 <summary>
     <remarks>
         Concrete class inheriting from the ExceptionHandler class and specialized in creating
         and displaying a Warning message when inputs are found to be missing.
     </remarks>
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.ExcelChartFactoryInterface">
 <summary>
     <remarks>
         Interface that defines the methods that all the concrete classes 
         responsible for the creation of Excel charts must implement.
     </remarks>
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.ExcelChartFactory">
 <summary>
 
 <remarks>
 <para> Concrete class responsible for creating Excel Charts. </para>
 <para> The class is assigned with the reference to an excel workbook file and creates charts
 inside of it based on multiple input criteria. 
 All the utility methods required to create the chart and assign specific properties to it
 are hidden within the public method <see cref="M:Piles_Stiffness_Calibration.ExcelChartFactory.create(Microsoft.Office.Interop.Excel.XlChartType,System.String,System.String,Microsoft.Office.Interop.Excel.Range,System.String,System.Collections.Generic.List{System.String},System.String,System.String,Microsoft.Office.Interop.Excel.XlColorIndex)"/> 
 in line with the FACADE Pattern </para>
 
 <para>Design Patterns:
 - FACTORY PATTERN
 - FACADE PATTERN </para>
 
 
 </remarks>
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.ExcelDataManager">
 <summary>
     <remarks>
         <para>Concrete Class responsible for carrying out editing operations on an referenced excel
         workbook and worksheet.</para>
         <para>The logic and the multiple calls to the Excel API functions are encapsuled within the methods
         of this class, such as <see cref="M:Piles_Stiffness_Calibration.ExcelDataManager.createChart"/>.
         This prevents the client to see all the multiple calls required to carry out each main editing task
         on the excel file as per the FACADE PATTERN. </para>
     </remarks>
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.ExcelRangeType">
 <summary>
 
 Enumeration made from a number of identification constants for different types of Excel range.
 Each Constant is associated to a specific range formatting style. 
 Whenever an Excel range has to be formatted as per one of the styles represented by the 
 constants of this Enum, it's sufficient to pass the enum constant as input and the formatRange()
 method will run the algorithnm assigning the proper format to the range.
 
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.ExcessiveΔKException">
 <summary>
 
 <remarks>
 <para> Exception Concrete Class thrown when the difference between the pile stiffness calculated at the current
 iteration step and the previous one is bigger than the maximum value specified by the user. </para>
 <para> The class inherits from the Exception class and it gets thrown by the following classes.
 <see cref="T:Piles_Stiffness_Calibration.PSC_Model"/>
 <see cref="T:Piles_Stiffness_Calibration.PSC_Controller"/>
 <see cref="T:Piles_Stiffness_Calibration.EventsListener"/>
  </para>
 
 <para> Programming Techniques: 
 - EXCEPTIONS HANDLING </para>
 
 </remarks>
 
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.FileManager">
 <summary>
     <remarks>
         <para>Static Class responsible to provide utility methods allowing to set folder paths
         and file names for all the outputs files produced by the application.</para>
         <para>The file paths/names are labelled with information about creation date and corresponding
         analysis iteration number. This prevents any overriding of the output files and allows
         for proper tracking of the different stages of the iterative analysis carried out.</para>
     </remarks>
 </summary>
 
</member>
<member name="T:Piles_Stiffness_Calibration.PSC_Controller">
 <summary>
 
 <remarks>
 <para> Main class of the Controller Package. </para>
 <para> It allows the View to communicate with the Model via the MVC Pattern. </para>

 <para> Desing Patterns: 
 - MODEL-VIEW-CONTROLLER </para>
 
 <para> Programming Techniques: 
 - STREAMS </para>
 
 </remarks>
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.Sound">
 <summary>
 
 Enumeration made from a number of identification constants for different typologies of sound.
 Each Constant is then associated with a specific filepath to the corresponding audio file.
 The use of Enum constants allow to hide the filepaths to the user.
 
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.SoundManager">
 <summary>
 
 <para> 
 Concrete Class implementing the interface AudioManagerInterface and that is responsible 
 for playing the sound effects of the application, when active.
 </para>
 
 <para>
 Design Patterns:
  - SINGLETON
 </para> 
 
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.SoundPathRetriever">
 <summary>
     <remarks>
         <para>
         Static class used to retrieve preset filepaths based on the value of the input Sound enumeration.
         This allows to keep all the filepaths encapsuled within the getPath() method of the present class.
         These filepaths can be directly accessed via shorter and more intuitive nicknames/short names as per 
         the Sound enumeration values, thus making the coding much better readable.
         </para>
         <para>Design Patterns: - FACADE</para>
     </remarks>
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.InvalidFilePathException">
 <summary>
 
 InvalidFilePathException Concrete Class
 
 <remarks>
 <para> Exception Concrete Class thrown when filepath provided by the user is not valid. </para>
 <para> The class inherits from the Exception class and it gets thrown by the following classes whenever it is found that the provided filepath
 is not valid.
 <see cref="T:Piles_Stiffness_Calibration.PSC_Model"/>
 <see cref="T:Piles_Stiffness_Calibration.PSC_Controller"/>
 <see cref="T:Piles_Stiffness_Calibration.EventsListener"/>
  </para>
 
 <para> Programming Techniques: 
 - EXCEPTIONS HANDLING </para>
 
 </remarks>
 
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.JSONSerializer`1">
 <summary>
 
 JSONSerializer Concrete Class
 
 <remarks>
 <para> Generic Type Concrete Class responsible for serializing and deserializing json files. </para>
 <para> The class allows to hide the list of calls to Newtonsoft library functions within the two methods
 <see cref="M:Piles_Stiffness_Calibration.JSONSerializer`1.serialize(`0,System.String)"/> and <see cref="M:Piles_Stiffness_Calibration.JSONSerializer`1.deserialize(System.String)"/>. </para>
 <para> This allows to make the code easy to read client side. </para>
 
 <typeparam name="T">
 The base item type. Must implement IComparable.
 </typeparam>

 <para> Desing Patterns: 
 - FACADE </para>
 
 <para> Programming Techniques: 
 - GENERIC TYPES
 - SERIALIZATION </para>
 
 </remarks>
 
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.MissingInputsException">
 <summary>
 
 MissingInputsException Concrete Class
 
 <remarks>
 <para> Exception Concrete Class thrown when user inputs are missing. </para>
 <para> The class inherits from the Exception class and it gets thrown by the following classes whenever it is found that the required inputs
 from the user are missing.
 <see cref="T:Piles_Stiffness_Calibration.PSC_Model"/>
 <see cref="T:Piles_Stiffness_Calibration.PSC_Controller"/>
 <see cref="T:Piles_Stiffness_Calibration.EventsListener"/>
  </para>
 
 <para> Programming Techniques: 
 - EXCEPTIONS HANDLING </para>
 
 </remarks>
 
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.PileStatus">
 <summary>
 
 Enumeration made from different constants identifying the status of the pile: Loaded or Unloaded.
 If the status is set to LOADED that means that the pile is currently subjected to a load greater than what it 
 has been loaded with previously (UNLOADED viceversa).
 This is particularly important when working with existing piles which, if loaded with a load lower than what
 they've ever been subjected to, they won't experience any settlement and their stiffness has to be considered 
 essentially infinite (i.e. rigid).
 
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.PSC_Model">
 <summary>
 
 PSC_Model Concrete Class
 
 <remarks>
 <para> Concrete class and main class of the Model Package. </para>
 <para> The class contains all the main data and methods for the running of the application.
 The model is updated based on the actions of the user in the View via the MVC Design Pattern while the View
 is updated based on the changes of the Model via the OBSERVER Design Pattern. </para>
 
 <para> Desing Patterns: 
 - OBSERVER
 - MODEL-VIEW-CONTROLLER
 - SINGLETON </para>
 
 <para> Programming Techniques: 
 - STREAMS </para>
 
 </remarks>
 
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.Observable">
 <summary>
 
 <remarks>
 <para>
 Essential Interface of the Observer Pattern and that, once implemented in the Model,
 it allows it to notify all the registered observers as soon as a change occurs in
 its own state. 
 </para>
 </remarks>
 
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.Observer">
 <summary>
 
 <remarks>
 <para>
 Essential functional interface of the Observer Pattern.
 Once implemented in the View, it allows it to update itself automatically when 
 whatever change comes about in the Model. 
 </para>
 </remarks>
 
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.cPlugin">
 <summary>
 
 <remarks>
 <para> Concrete class implementing the ETABSv1.cPluginContract interface.
 The method <see cref="M:Piles_Stiffness_Calibration.cPlugin.Main(ETABSv1.cSapModel@,ETABSv1.cPluginCallback@)"/> gets run as soon as the 
 user clicks on the icon of the plugin in the ETABS UI. This method is used to instantiate and initialize
 the Controller (<see cref="T:Piles_Stiffness_Calibration.PSC_Controller"/>) of the application that, in turn, initialize the
 Model (<see cref="T:Piles_Stiffness_Calibration.PSC_Model"/>) and the View (<see cref="T:Piles_Stiffness_Calibration.PSC_View"/>) as per MVC Pattern.
 </para>
 </remarks>
 
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.PileObject">
 <summary>
 
 <remarks>
 <para> Concrete class describing the Pile Object. </para>
 <para> Name, location, loads, displacements and any other relevant parameter describing the pile
 are recorded as attributes of this class.
 The Class is also provided with specifically overwritten Hashing, Equals and CompareTo methods allowing
 any instance of the class to be properly stored and sorted in whatever sortable data structure. </para>
 
 </remarks>
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.PointDisplacements">
 <summary>
 
 <remarks>
 <para> Concrete class containing sets of translational displacement values u1,u2,u3 in mm. </para>
 </remarks>
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.PointLoads">
 <summary>
 
 <remarks>
 <para> Concrete class containing sets of point loads values F1,F2,F3 in N. </para>
 </remarks>
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.PointObject">
 <summary>
 
 <remarks>
 <para> 
 Concrete class defining a point object based on name and cardinal coordinates. 
 Hashing, Equals and CompareTo methods are properly overwritten to allow sorting of class instances
 in any kind of data structure.
 </para>
 </remarks>
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.SpringObject">
 <summary>
 
 <remarks>
 <para> 
 Concrete class defining a spring object based on name and stiffness values u1,u2,u3 in N/mm. 
 Hashing, Equals and CompareTo methods are properly overwritten to allow sorting of class instances
 in any kind of data structure.
 </para>
 </remarks>
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.AboutBox">
 <summary>
 
 <remarks>
 <para> Concrete class representing the AboutBox of the application, highlighting important information for the user. </para>
 <para> The AboutBox window appears after the splashscreen has disappeared and its purpose is to show to the user functionalities and limitations of the tool. </para>
 <para> The class implements the Observer functional interface that allows it to be updated with changes occurring in the Model
 via the Observer Pattern.</para>
 <para> The <see cref="M:Piles_Stiffness_Calibration.AboutBox.update"/> method gets called as soon as the window gets loaded, allowing it to collect the application's assembly 
 information that is stored in the Model <see cref="T:Piles_Stiffness_Calibration.PSC_Model"/>
 </para>
 
 <para> Desing Patterns: 
 - OBSERVER </para>
 
 </remarks>
 
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.ProcessName">
 <summary>
 
 <remarks>
 <para> Enumeration Class listing Names of Running Processes. </para>
 <para> Values of the Enumeration allow the class <see cref="T:Piles_Stiffness_Calibration.WindowResizer"/> to operate on the window of a specific 
 process running on the screen while hiding from the client the api functions dealing with it. </para>
 
 </remarks>
 
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.DockType">
 <summary>
 
 <remarks>
 <para> Enumeration Class listing Window docking options on the screen. </para>
 <para> Values of the Enumeration allow the class WindowResizer to place the window in the correct location
 on the screen hiding from the client the api functions dealing with it. </para>
 
 </remarks>
 
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.ProcessNameRetriever">
 <summary>
 
 <remarks>
 <para> Static Class returning the string name of the Window corresponding to a specific process. </para>
 <para> Given an input <see cref="T:Piles_Stiffness_Calibration.ProcessName"/> Enumeration value, the class returns its corresponding string 
  </para>
 
 <para> Desing Patterns: 
 - FACADE </para>
 
 </remarks>
 
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.SplashScreen">
 <summary>
 
 <remarks>
 <para> Concrete class representing the initial splashscreen window of the application. </para>
 <para> The class implements the Observer functional interface that allows it to be updated with changes occurring in the Model
 via the Observer Pattern.</para>
 <para> The <see cref="M:Piles_Stiffness_Calibration.SplashScreen.update"/> method gets called as soon as the window gets loaded, allowing it to collect the application's assembly 
 information that is stored in the Model <see cref="T:Piles_Stiffness_Calibration.PSC_Model"/>
  </para>
 
 <para> Desing Patterns: 
 - OBSERVER </para>
 
 </remarks>
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.ViewInputs">
 <summary>
 
 <remarks>
 <para> Concrete class representing the main UI window of the application. </para>
 <para> The class implements the Observer functional interface that allows it to be updated with 
 changes occurring in the Model (<see cref="T:Piles_Stiffness_Calibration.PSC_Model"/>) via the Observer Pattern.
  </para>
 
 <para> Desing Patterns: 
 - FACADE </para>
 
 </remarks>
 
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.PSC_View">
 <summary>
 
 <remarks>
 <para> Concrete class and main class of the View Package. </para>
 <para> The class contains all the main data and methods for the running the User Interface of the application.
 The View is updated based on the changes occurring in the Model (<see cref="T:Piles_Stiffness_Calibration.PSC_Model"/>) via the OBSERVER Design Pattern, while the 
 Model is updated based on the actions taken by the user in the View (<see cref="T:Piles_Stiffness_Calibration.PSC_View"/>) via the Controller <see cref="T:Piles_Stiffness_Calibration.PSC_Controller"/> (MVC Pattern).
  </para>
 
 <para> Desing Patterns: 
 - OBSERVER
 - MODEL-VIEW-CONTROLLER </para>
 
 </remarks>
 
 </summary>
</member>
<member name="T:Piles_Stiffness_Calibration.WindowResizer">
 <summary>
 
 <remarks>
 <para> Concrete class responsible for the sizing and arrangement of external application windows. </para>
 <para> The class implements functions from the Windows API assembly "user32.dll" to carry out docking and 
 resizing operations on windows belonging to external applications running in parallel to the application.
  </para>
 
 <para> Desing Patterns: 
 - FACADE </para>
 
 </remarks>
 
 </summary>
</member>
</members>
</doc>
